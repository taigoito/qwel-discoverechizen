// Grid System

// ルート要素にて定義
// これを基準とした1remを、全ての寸法の基本単位とする
$rootFontSize:   16px;
$fixedFontSize:  3.84vw; // 4vw以下推奨

// 基準幅
$gridBase:       6rem;

// 画像アスペクト比 (高さ/幅)
$imgAspectRatio: 3 / 4;

// 各BP別用途
// xs: 1カラム (4グリッド: 24rem)
// 文字サイズを流動させ、レイアウトを固定
//
// sm: 1〜2カラム (6グリッド: 36rem)
// コンテナ幅を拡げ、文字サイズをpxに切り替え固定
// このサイズのデバイスは少ないため、ほとんどxsのレイアウトを継承する
// 用途はせいぜい下層ページで、メディアと文章の使用くらいに留める
// WordPressブロックエディタの都合上、BPを600pxで設置するのが望ましい
//
// md: 1〜3カラム (9グリッド: 54rem)
// 画像:文章を1:2の割合で表示するリストレイアウトが可能
//
// lg: 1～4カラム (12グリッド: 72rem)
// 幅広ラッパー使用時に4カラムレイアウトが可能
// "md"からflexItemを伸長させる使い方を推奨

// ブレイクポイント (BP)
// padding: clamp(12px, 2%, 24px)を左右に付与し、コンテナが収まる
$breakpoints:    (
  sm:              600px, // コンテナ576px WordPressブロックエディタのBP
  md:              900px, // コンテナ864px theme.json settings.layout.contentSize の値
  lg:              1200px // コンテナ1152px theme.json settings.layout.wideSize の値
);

// 余白定義
$spacingValues:  (
  0:               0,
  1:               var(--wp--custom--spacing--x-small, 0.375rem),
  2:               var(--wp--custom--spacing--small, 0.75rem),
  3:               var(--wp--custom--spacing--medium, 1.5rem),
  4:               var(--wp--custom--spacing--large, 3rem),
  5:               var(--wp--custom--spacing--x-large, 6rem)
);

// BPの配列の接頭辞から値を返す関数
@function breakpoint($key: "lg") {
  @return map-get($breakpoints, $key);
}

// 余白の配列の接頭辞から値を返す関数
@function space($key: 2) {
  @return map-get($spacingValues, $key);
}

// ガター
// 行を生成することで、コンテナの端とコンテンツ間が、それぞれ1.5rem空く仕様
$gutter:         0.75rem;
$containerPad:   (
  sm:              $gutter,
  md:              var(--wp--custom--spacing--container-pad, $gutter),
  lg:              var(--wp--custom--spacing--container-pad-wide, $gutter)
);

// コンテナ生成
// 最大幅のみ固定の流動コンテナ
@mixin container($key: "lg") {
  @if ($key == "lg") {
    @extend %__containerLg;
  } @else if ($key == "md") {
    @extend %__containerMd;
  } @else {
    @extend %__containerSm;
  }
  max-width: breakpoint($key);
}

// 行生成
@mixin row($horizontalAlign: space-around, $verticalAlign: center) {
  display: flex;
  flex-wrap: wrap;
  justify-content: $horizontalAlign;
  align-items: $verticalAlign;
}

// 列生成
@mixin col($size: 12, $flexGrow: false, $key: "xs") {
  @extend %__containerSm;

  @if ($key == "xs") {
    @if ($flexGrow == false) {
      flex: 0 1 #{$size * $gridBase};
    } @else {
      flex: $size 1 #{$size * $gridBase};
    }
  } @else {
    // 幅広レイアウト時の定義
    // "xs"～"sm"は未定義でも自動で1カラム一杯に広がる
    // "md"で幅を指定し、flex-glowを指定するのを推奨
    @media (min-width: breakpoint($key)) {
      @if ($flexGrow == false) {
        flex: 0 1 #{$size * $gridBase};
      } @else {
        flex: $size 1 #{$size * $gridBase};
      }
    }
  }
}
